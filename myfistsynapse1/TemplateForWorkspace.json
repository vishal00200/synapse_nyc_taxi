{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "myfistsynapse1"
		},
		"myfistsynapse1-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'myfistsynapse1-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:myfistsynapse1.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"myfistsynapse1-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://reportingvishal.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/myfistsynapse1-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('myfistsynapse1-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/myfistsynapse1-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('myfistsynapse1-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/myfirstpool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southeastasia"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "use nyc_taxi_ldw;\n\nSELECT DISTINCT year,\n                month\nFROM silver.vv_trip_green_data;\n\n\n\nEXEC gold.usp_gold_trip_data_green '2020', '01'\nEXEC gold.usp_gold_trip_data_green '2020', '02'\nEXEC gold.usp_gold_trip_data_green '2020', '03'\nEXEC gold.usp_gold_trip_data_green '2020', '04'\nEXEC gold.usp_gold_trip_data_green '2020', '05'\nEXEC gold.usp_gold_trip_data_green '2020', '06'\nEXEC gold.usp_gold_trip_data_green '2020', '07'\nEXEC gold.usp_gold_trip_data_green '2020', '08'\nEXEC gold.usp_gold_trip_data_green '2020', '09'\nEXEC gold.usp_gold_trip_data_green '2020', '10'\nEXEC gold.usp_gold_trip_data_green '2020', '11'\nEXEC gold.usp_gold_trip_data_green '2020', '12'\nEXEC gold.usp_gold_trip_data_green '2021', '01'\nEXEC gold.usp_gold_trip_data_green '2021', '02'\nEXEC gold.usp_gold_trip_data_green '2021', '03'\nEXEC gold.usp_gold_trip_data_green '2021', '04'\nEXEC gold.usp_gold_trip_data_green '2021', '05'\nEXEC gold.usp_gold_trip_data_green '2021', '06'\n\n\n\nEXEC silver.usp_silver_trip_data_green '2020', '01'\nEXEC silver.usp_silver_trip_data_green '2020', '02'\nEXEC silver.usp_silver_trip_data_green '2020', '03'\nEXEC silver.usp_silver_trip_data_green '2020', '04'\nEXEC silver.usp_silver_trip_data_green '2020', '05'\nEXEC silver.usp_silver_trip_data_green '2020', '06'\nEXEC silver.usp_silver_trip_data_green '2020', '07'\nEXEC silver.usp_silver_trip_data_green '2020', '08'\nEXEC silver.usp_silver_trip_data_green '2020', '09'\nEXEC silver.usp_silver_trip_data_green '2020', '10'\nEXEC silver.usp_silver_trip_data_green '2020', '11'\nEXEC silver.usp_silver_trip_data_green '2020', '12'\nEXEC silver.usp_silver_trip_data_green '2021', '01'\nEXEC silver.usp_silver_trip_data_green '2021', '02'\nEXEC silver.usp_silver_trip_data_green '2021', '03'\nEXEC silver.usp_silver_trip_data_green '2021', '04'\nEXEC silver.usp_silver_trip_data_green '2021', '05'\nEXEC silver.usp_silver_trip_data_green '2021', '06'\n\nif object_id('bronze.ana') is not NULL\n\tdrop EXTERNAL TABLE bronze.ana;\n\nCREATE EXTERNAL TABLE bronze.ana \n\t( \n\t\tBorough VARCHAR(15),\n        trip_date DATE,\n        trip_day VARCHAR(10),\n        trip_day_weekend_ind CHAR(1),\n        cash_trip_count int,\n        card_trip_count int\n\t)\n\twith (\n\t\tLOCATION = 'gold/trip_data_green/year=2020/month=01/*',\n\t\tDATA_SOURCE = [nyc-taxi-data-external],\n\t\tFILE_FORMAT = parquet_file_format\n\t)\n\nselect count(*) from bronze.ana;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/11_data_quality_checks')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "USE NYC_TAXI_DISCOVERY;\n\nSELECT\n    min(total_amount) as min_total_amount,\n    max(total_amount) as min_total_amount,\n    avg(total_amount) as min_total_amount,\n    count(*) as total_nubeer_of_records,\n    count(*) as not_null_total_nubeer_of_records\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        FORMAT = 'parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS trip_data\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        FORMAT = 'parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS trip_data\n    where total_amount < 0;\n    \n----\n\nSELECT payment_type,description\n    FROM OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE = 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '1.0',\n        FIELDQUOTE = '0x0b',        \n        FIELDTERMINATOR = '0x0b',\n        ROWTERMINATOR = '0x0a'\n    )\n    WITH\n    (\n        jsonDoc NVARCHAR(MAX)\n    ) AS PAYMENT_TYPE\n    CROSS APPLY OPENJSON(jsonDoc)\n    WITH\n    (\n        payment_type SMALLINT,\n        description VARCHAR(20) '$.payment_type_desc'\n    );\n\n-------\n\nSELECT\n    payment_type,\n    count(*) as record_count\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        FORMAT = 'parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS trip_data\n    where total_amount < 0\n    group by payment_type\n    order by payment_type;\n\n\nSELECT\n    TOP 10000000 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=*/month=*/*.parquet',\n        FORMAT = 'parquet',\n        DATA_SOURCE = 'nyc_taxi_data_raw'\n    ) AS trip_data\n    ---where total_amount < 0\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}